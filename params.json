{"name":"Research galaxy","tagline":"Connecting those who discover.","body":"# [Research Galaxy](http://researchgalaxy.com)\r\n\r\nOur objective is to connect researchers to the resources they need. Whether you are an accomplished researcher or an avid fan stargazing at home, we want you to continue your search for the incredible.\r\n\r\n***\r\n\r\n## Quick Start\r\n\r\nInstall Node.js and then:\r\n\r\n```sh\r\n$ git clone git://github.com/joshdmiller/ng-boilerplate\r\n$ cd ng-boilerplate\r\n$ sudo npm -g install grunt-cli karma bower\r\n$ npm install\r\n$ bower install\r\n$ grunt watch\r\n```\r\n\r\nFinally, open `file:///path/to/ng-boilerplate/build/index.html` in your browser.\r\n\r\nHappy hacking!\r\n\r\n## Purpose\r\n\r\n`ngBoilerplate` is designed to make life easy by providing a basic framework\r\nwith which to kickstart AngularJS projects. It contains a best-practice\r\ndirectory structure to ensure code reusability and maximum scalability.\r\nngBoilerplate also comes prepackaged with the most popular design frameworks\r\naround: [Twitter Bootstrap](http://getbootstrap.com),\r\n[Angular UI](http://angular-ui.github.io),\r\n[Angular Bootstrap](http://angular-ui.github.io/bootstrap),\r\n[Font Awesome](http://fortawesome.github.com/Font-Awesome), and\r\n[LESS](http://lesscss.org). Lastly, it contains a sophisticated\r\n[Grunt](http://gruntjs.org)-based build system to ensure maximum productivity.\r\nAll you have to do is clone it and start coding!\r\n\r\n## Philosophy\r\n\r\nThe principal goal of `ngBoilerplate` is to set projects up for long-term\r\nsuccess.  So `ngBoilerplate` tries to follow best practices everywhere it can.\r\nThese are:\r\n\r\n- Properly orchestrated modules to encourage drag-and-drop component re-use.\r\n- Tests exist alongside the component they are testing with no separate `test`\r\n  directory required; the build process should be sophisticated enough to handle\r\n  this.\r\n- Speaking of which, the build system should work automagically, without\r\n  involvement from the developer. It should do what needs to be done, while\r\n  staying out of the way. Components should end up tested, linted, compiled,\r\n  and minified, ready for use in a production environment.\r\n- Integration with popular tools like Bower, Karma, and LESS.\r\n- *Encourages* test-driven development. It's the only way to code.\r\n- A directory structure that is cogent, meaningful to new team members, and\r\n  supporting of the above points.\r\n- Well-documented, to show new developers *why* things are set up the way they\r\n  are.\r\n- It should be responsive to evidence. Community feedback is therefore crucial\r\n  to the success of `ngBoilerplate`.\r\n\r\nBut `ngBoilerplate` is not an example of an AngularJS app: this is a\r\nkickstarter. If you're looking for an example of what a complete, non-trivial\r\nAngularJS app that does something real looks like, complete with a REST backend\r\nand authentication and authorization, then take a look at\r\n[`angular-app`](http://github.com/angular-app/angular-app), which does just\r\nthat - and does it well.\r\n\r\n## Learn\r\n\r\n### Overall Directory Structure\r\n\r\nAt a high level, the structure looks roughly like this:\r\n\r\n```\r\nng-boilerplate/\r\n  |- grunt-tasks/\r\n  |- karma/\r\n  |- src/\r\n  |  |- app/\r\n  |  |  |- <app logic>\r\n  |  |- assets/\r\n  |  |  |- <static files>\r\n  |  |- common/\r\n  |  |  |- <reusable code>\r\n  |  |- less/\r\n  |  |  |- main.less\r\n  |- vendor/\r\n  |  |- angular-bootstrap/\r\n  |  |- bootstrap/\r\n  |  |- placeholders/\r\n  |- .bowerrc\r\n  |- bower.json\r\n  |- build.config.js\r\n  |- Gruntfile.js\r\n  |- module.prefix\r\n  |- module.suffix\r\n  |- package.json\r\n```\r\n\r\nWhat follows is a brief description of each entry, but most directories contain\r\ntheir own `README.md` file with additional documentation, so browse around to\r\nlearn more.\r\n\r\n- `karma/` - test configuration.\r\n- `src/` - our application sources. [Read more &raquo;](src/README.md)\r\n- `vendor/` - third-party libraries. [Bower](http://bower.io) will install\r\n  packages here. Anything added to this directory will need to be manually added\r\n  to `build.config.js` and `karma/karma-unit.js` to be picked up by the build\r\n  system.\r\n- `.bowerrc` - the Bower configuration file. This tells Bower to install\r\n  components into the `vendor/` directory.\r\n- `bower.json` - this is our project configuration for Bower and it contains the\r\n  list of Bower dependencies we need.\r\n- `build.config.js` - our customizable build settings; see \"The Build System\"\r\n  below.\r\n- `Gruntfile.js` - our build script; see \"The Build System\" below.\r\n- `module.prefix` and `module.suffix` - our compiled application script is\r\n  wrapped in these, which by default are used to place the application inside a\r\n  self-executing anonymous function to ensure no clashes with other libraries.\r\n- `package.json` - metadata about the app, used by NPM and our build script. Our\r\n  NPM dependencies are listed here.\r\n\r\n### Detailed Installation\r\n\r\nThis section provides a little more detailed understanding of what goes into\r\ngetting `ngBoilerplate` up and running. Though `ngBoilerplate` is really simple\r\nto use, it might help to have an understanding of the tools involved here, like\r\nNode.js and Grunt and Bower. If you're completely new to highly organized,\r\nmodern JavaScript development, take a few short minutes to read [this overview\r\nof the tools](tools.md) before continuing with this section.\r\n\r\nOkay, ready to go? Here it is:\r\n\r\n`ngBoilerplate` uses [Grunt](http://gruntjs.org) as its build system, so\r\n[Node.js](http://nodejs.org) is required. Also, Grunt by default no longer comes\r\nwith a command-line utility and Karma and Bower must end up in your global path\r\nfor the build system to find it, so they must be installed independently. Once\r\nyou have Node.js installed, you can simply use `npm` to make it all happen:\r\n\r\n```sh\r\n$ npm -g install grunt-cli karma bower\r\n```\r\n\r\nIf you're on Linux (like I am) then throw `sudo` in front of that command.  If\r\nyou're on Windows, then you're on your own.\r\n\r\nNext, you can either clone this repository using Git, download it as a zip file\r\nfrom GitHub, or merge the branch into your existing repository. Assuming you're\r\nstarting from scratch, simply clone this repository using git:\r\n\r\n```sh\r\n$ git clone git://github.com/joshdmiller/ng-boilerplate my-project-name\r\n$ cd my-project-name\r\n```\r\n\r\nAnd then install the remaining build dependencies locally:\r\n\r\n```sh\r\n$ npm install\r\n```\r\n\r\nThis will read the `dependencies` (empty by default) and the `devDependencies`\r\n(which contains our build requirements) from `package.json` and install\r\neverything needed into a folder called `node_modules/`.\r\n\r\nThere are many Bower packages used by `ngBoilerplate`, like Twitter Bootstrap\r\nand Angular UI, which are listed in `bower.js`. To install them into the\r\n`vendor/` directory, simply run:\r\n\r\n```sh\r\n$ bower install\r\n```\r\n\r\nIn the future, should you want to add a new Bower package to your app, run the\r\n`install` command:\r\n\r\n```sh\r\n$ bower install packagename --save-dev\r\n```\r\n\r\nThe `--save-dev` flag tells Bower to add the package at its current version to\r\nour project's `bower.js` file so should another developer download our\r\napplication (or we download it from a different computer), we can simply run the\r\n`bower install` command as above and all our dependencies will be installed for\r\nus. Neat!\r\n\r\nTechnically, `ngBoilerplate` is now ready to go.\r\n\r\nHowever, prior to hacking on your application, you will want to modify the\r\n`package.json` file to contain your project's information. Do not remove any\r\nitems from the `devDependencies` array as all are needed for the build process\r\nto work.\r\n\r\nTo ensure your setup works, launch grunt:\r\n\r\n```sh\r\n$ grunt watch\r\n```\r\n\r\nThe built files are placed in the `build/` directory by default. Open the\r\n`build/index.html` file in your browser and check it out! Because everything is\r\ncompiled, no XHR requests are needed to retrieve templates, so until this needs\r\nto communicate with your backend there is no need to run it from a web server.\r\n\r\n`watch` is actually an alias of the `grunt-contrib-watch` that will first run a\r\npartial build before watching for file changes. With this setup, any file that\r\nchanges will trigger only those build tasks necessary to bring the app up to\r\ndate. For example, when a template file changes, the templates are recompiled\r\nand concatenated, but when a test/spec file changes, only the tests are run.\r\nThis allows the watch command to complete in a fraction of the time it would\r\nordinarily take.\r\n\r\nIn addition, if you're running a Live Reload plugin in your browser (see below),\r\nyou won't even have to refresh to see the changes! When the `watch` task detects\r\na file change, it will reload the page for you. Sweet.\r\n\r\nWhen you're ready to push your app into production, just run the `compile`\r\ncommand:\r\n\r\n```sh\r\n$ grunt compile\r\n```\r\n\r\nThis will concatenate and minify your sources and place them by default into the\r\n`bin/` directory. There will only be three files: `index.html`,\r\n`your-app-name.js`, and `your-app-name.css`. All of the vendor dependencies like\r\nBootstrap styles and AngularJS itself have been added to them for super-easy\r\ndeploying. If you use any assets (`src/assets/`) then they will be copied to\r\n`bin/` as is.\r\n\r\nLastly, a complete build is always available by simply running the default\r\ntask, which runs `build` and then `compile`:\r\n\r\n```sh\r\n$ grunt\r\n```\r\n\r\n### The Build System\r\n\r\nThe best way to learn about the build system is by familiarizing yourself with\r\nGrunt and then reading through the heavily documented build script,\r\n`Gruntfile.js`. But you don't need to do that to be very productive with\r\n`ngBoilerplate`. What follows in this section is a quick introduction to the\r\ntasks provided and should be plenty to get you started.\r\n\r\nThe driver of the process is the `delta` multi-task, which watches for file\r\nchanges using `grunt-contrib-watch` and executes one of nine tasks when a file\r\nchanges:\r\n\r\n* `delta:gruntfile` - When `Gruntfile.js` changes, this task runs the linter\r\n  (`jshint`) on that one file and reloads the configuration.\r\n* `delta:assets` - When any file within `src/assets/` changes, all asset files\r\n  are copied to `build/assets/`.\r\n* `delta:html` - When `src/index.html` changes, it is compiled as a Grunt\r\n  template, so script names, etc., are dynamically replaced with the correct\r\n  values configured dynamically by Grunt.\r\n* `delta:less` - When any `*.less` file within `src/` changes, the\r\n  `src/less/main.less` file is linted and copied into\r\n  `build/assets/ng-boilerplate.css`.\r\n* `delta:jssrc` - When any JavaScript file within `src/` that does not end in\r\n  `.spec.js` changes, all JavaScript sources are linted, all unit tests are run,\r\n  and the all source files are re-copied to `build/src`.\r\n* `delta:coffeesrc` - When any `*.coffee` file in `src/` that doesn't match\r\n  `*.spec.coffee` changes, the Coffee scripts are compiled independently into\r\n  `build/src` in a structure mirroring where they were in `src/` so it's easy to\r\n  locate problems. For example, the file\r\n  `src/common/titleService/titleService.coffee` is compiled to\r\n  `build/src/common/titleService/titleService.js`.\r\n* `delta:tpls` - When any `*.tpl.html` file within `src/` changes, all templates\r\n  are put into strings in a JavaScript file (technically two, one for\r\n  `src/common/` and another for `src/app/`) that will add the template to\r\n  AngularJS's\r\n  [`$templateCache`](http://docs.angularjs.org/api/ng.$templateCache) so\r\n  template files are part of the initial JavaScript payload and do not require\r\n  any future XHR.  The template cache files are `build/template-app.js` and\r\n  `build/template-common.js`.\r\n* `delta:jsunit` - When any `*.spec.js` file in `src/` changes, the test files\r\n  are linted and the unit tests are executed.\r\n* `delta:coffeeunit` - When any `*.spec.coffee` file in `src/` changes, the test\r\n  files are linted, compiled their tests executed.\r\n\r\nAs covered in the previous section, `grunt watch` will execute a full build\r\nup-front and then run any of the aforementioned `delta:*` tasks as needed to\r\nensure the fastest possible build. So whenever you're working on your project,\r\nstart with:\r\n\r\n```sh\r\n$ grunt watch\r\n```\r\n\r\nAnd everything will be done automatically!\r\n\r\n### Build vs. Compile\r\n\r\nTo make the build even faster, tasks are placed into two categories: build and\r\ncompile. The build tasks (like those we've been discussing) are the minimal\r\ntasks required to run your app during development.\r\n\r\nCompile tasks, however, get your app ready for production. The compile tasks\r\ninclude concatenation, minification, compression, etc. These tasks take a little\r\nbit longer to run and are not at all necessary for development so are not called\r\nautomatically during build or watch.\r\n\r\nTo initiate a full compile, you simply run the default task:\r\n\r\n```sh\r\n$ grunt\r\n```\r\n\r\nThis will perform a build and then a compile. The compiled site - ready for\r\nuploading to the server! - is located in `bin/`, taking a cue from\r\ntraditional software development. To test that your full site works as\r\nexpected, open the `bin/index.html` file in your browser. Voila!\r\n\r\n### Live Reload!\r\n\r\n`ngBoilerplate` also includes [Live Reload](http://livereload.com/), so you no\r\nlonger have to refresh your page after making changes! You need a Live Reload\r\nbrowser plugin for this:\r\n\r\n- Chrome - [Chrome Webstore](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei)\r\n- Firefox - [Download from Live Reload](http://download.livereload.com/2.0.8/LiveReload-2.0.8.xpi)\r\n- Safari - [Download from Live Reload](http://download.livereload.com/2.0.9/LiveReload-2.0.9.safariextz)\r\n- Internet Explorer - Surely you jest.\r\n\r\nNote that if you're using the Chrome version with `file://` URLs (as is the\r\ndefault with `ngBoilerplate`) you need to tell Live Reload to allow it. Go to\r\n`Menu -> Tools -> Extensions` and check the \"Allow access to file URLs\" box next\r\nto the Live Reload plugin.\r\n\r\nWhen you load your page, click the Live Reload icon in your toolbar and\r\neverything should work magically. w00t!\r\n\r\nIf you'd prefer to not install a browser extension, then you must add the\r\nfollowing to the end of the `body` tag in `index.html`:\r\n\r\n```html\r\n<script src=\"http://localhost:35729/livereload.js\"></script>\r\n```\r\n\r\nBoom!\r\n\r\n## Roadmap\r\n\r\nThis is a project that is not broad in scope, so there's not really much of a\r\nwish list here. But I would like to see a couple of things:\r\n\r\nI'd like it to be a little simpler. I want this to be a universal starting\r\npoint. If someone is starting a new AngularJS project, she should be able to\r\nclone, merge, or download its source and immediately start doing what she needs\r\nwithout renaming a bunch of files and methods or deleting spare parts. What I\r\nhave works for a first release, but I just think there is a little too much here\r\nright now.\r\n\r\nI'd also like to see a simple generator. Nothing like Yeoman, as there already\r\nis one of those, but just something that allows the user to say \"I want\r\nBootstrap but not Font Awesome and my app is called 'coolApp'. Gimme.\" Perhaps a\r\ncustom download builder like UI Bootstrap has. Like that. Then again, perhaps\r\nsome Yeoman generators wouldn't be out of line. I don't know. What do you think?\r\n\r\nNaturally, I am open to all manner of ideas and suggestions. See the\r\n\"Contributing\" section below.\r\n\r\n### To Do\r\n\r\nSee the [issues list](http://github.com/joshdmiller/ng-boilerplate/issues). And\r\nfeel free to submit your own!\r\n\r\n### Contributing\r\n\r\nThis is an opinionated kickstarter, but the opinions are fluid and\r\nevidence-based. Don't like the way I did something? Think you know of a better\r\nway? Have an idea to make this more useful? Let me know! You can contact me\r\nthrough all the usual channels or you can open an issue on the GitHub page. If\r\nyou're feeling ambitious, you can even submit a pull request - how thoughtful\r\nof you!\r\n\r\nSo join the team! We're good people.\r\n\r\n","google":"UA-45543296-1","note":"Don't delete this file! It's used internally to help with page regeneration."}